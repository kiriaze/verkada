////////////////////////////////////////////
// General Layout
////////////////////////////////////////////

html,
body {
	// // smoothScrolling
	// height: auto;
}

html {
	// @include mq('xxxlarge') {
	// 	font-size: 11px;
	// }

	&.is-loading {
		cursor: progress;
	}
	&.has-loaded {
		
	}
}

body {
	// // smoothScrolling
	// overflow-x: hidden;
	// overflow-y: scroll;
	// // 

	// // // prevent vertical scroll up refresh behavior
	// // overscroll-behavior: none;
	// // //
}

// [data-scroll-container] {

// 	@include mq('medium') {
// 		// smoothscrolling
		
// 		overflow: hidden;
// 		position: fixed;
// 		width: 100%;
// 		top: 0;
// 		left: 0;
		
// 		perspective: 1000;
// 		will-change: transform;
// 		backface-visibility: hidden;
// 		transform-style: preserve-3d;

// 		// smoothscrolling
// 	}

// }


// 
// not sure on naming convention here, need more modules to form proper naming
.fw-section,
.callout {
	background-color: map-get($colors, brand-offwhite);
	@include fluid-scale(padding-top padding-bottom, map-get($breakpoints, 'tiny'), map-get($breakpoints, 'xxxlarge'), 100px, 160px); // using fluid padding over fh
}

.blurb {
	max-width: 59rem;
	margin: 0 auto 4rem;
	text-align: center;
	@include mq('medium') {
		margin: 0 auto 8rem;
	}
	h2 {
		margin-bottom: 2.5rem;
		@include mq('medium') {
			margin-bottom: 4.5rem;
		}
	}
	p {
		
	}
}
// 

$containerWidth: map-get($breakpoints, xlarge);
.container {
	width: 100%;
	margin: 0 auto;
	position: relative;
	padding: 0 4vw;
	@include mq('xlarge') {
		max-width: calc(#{$containerWidth} + 8vw);
	}
	&--small {

	}
}

// mostly used for zoom reveal on lazyloaded images
.image-wrapper {
	display: block;
	position: relative;
	overflow: hidden;
	padding-bottom: 100%;
	figure {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-size: cover;
		background-position: center;
		// background-color: map-get($colors, brand-tertiary);
	}
}

////////////////////////////////////////////
// Link styles
////////////////////////////////////////////

a {
	transition: color .35s ease;
	color: map-get($colors, brand-primary);
	&:hover {
		color: map-get($colors, brand-secondary);
	}
}

// 
.link {
	
}
